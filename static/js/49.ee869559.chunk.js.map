{"version":3,"file":"static/js/49.ee869559.chunk.js","mappings":"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","sources":["components/pages/MainPage/style.module.scss","webpack://breaking/./src/components/molecules/MainPicture/style.module.scss?c67e","components/molecules/MainPicture/index.js","components/pages/MainPage/index.js","repository/connector.js","repository/PersonsActions/index.js","repository/index.js","store/actions/persons.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"style_main__uOzmp\"};","import React from \"react\";\r\nimport style from \"./style.module.scss\";\r\nimport mainWebp from \"../../../assets/images/mainWebp.webp\";\r\nimport mainJpg from \"../../../assets/images/main.jpg\";\r\n\r\nconst MainPicture = () => {\r\n  return (\r\n    <picture className={style.main}>\r\n      <source type=\"image/webp\" srcSet={mainWebp} />\r\n      <source type=\"image/jpg\" srcSet={mainJpg} />\r\n      <img src={mainWebp} alt=\"Изображение\" />\r\n    </picture>\r\n  );\r\n};\r\nexport default MainPicture;\r\n","import React from \"react\";\r\nimport style from \"./style.module.scss\";\r\nimport MainPicture from \"../../molecules/MainPicture\";\r\nimport { clearNameFounded } from \"../../../store/actions/persons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst MainPage = () => {\r\n  let dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(clearNameFounded());\r\n  }, []);\r\n\r\n  return (\r\n    <div className={style.wrapper}>\r\n      <MainPicture />\r\n    </div>\r\n  );\r\n};\r\nexport default MainPage;\r\n","import axios from \"axios\";\r\n\r\nclass Connector {\r\n  connector;\r\n  constructor() {\r\n    this.connector = axios.create({\r\n      baseURL: \"https://www.breakingbadapi.com/api/\",\r\n    });\r\n  }\r\n}\r\nexport default new Connector();\r\n","import Connector from \"../connector\";\r\n\r\nclass PersonsActions {\r\n  getPersonsFromApi = async (limit, offset) => {\r\n    const result = {\r\n      value: null,\r\n      error: null,\r\n    };\r\n    try {\r\n      const response = await Connector.connector.get(\r\n        `/characters?limit=${limit}&offset=${offset}`\r\n      );\r\n      result.value = response.data;\r\n    } catch (error) {\r\n      result.error = error;\r\n    }\r\n    return result;\r\n  };\r\n  getPersonFromApi = async (id) => {\r\n    const result = {\r\n      value: null,\r\n      error: null,\r\n    };\r\n    try {\r\n      const response = await Connector.connector.get(`/characters/${id}`);\r\n      result.value = response.data[0];\r\n    } catch (error) {\r\n      result.error = error;\r\n    }\r\n    return result;\r\n  };\r\n  getRandomQuoteFromApi = async () => {\r\n    const result = {\r\n      value: null,\r\n      error: null,\r\n    };\r\n    try {\r\n      const response = await Connector.connector.get(\"/quote/random\");\r\n      result.value = response.data[0];\r\n    } catch (error) {\r\n      result.error = error;\r\n    }\r\n    return result;\r\n  };\r\n  getQuoteFromApi = async (nameForQuotes) => {\r\n    const result = {\r\n      value: null,\r\n      error: null,\r\n    };\r\n    try {\r\n      const response = await Connector.connector.get(\r\n        `/quote?author=${nameForQuotes}`\r\n      );\r\n      result.value = response.data[0];\r\n    } catch (error) {\r\n      result.error = error;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  getPersonFromApiName = async (name) => {\r\n    const result = {\r\n      value: null,\r\n      error: null,\r\n    };\r\n    try {\r\n      const response = await Connector.connector.get(\r\n        `/characters?name=${name}`\r\n      );\r\n      result.value = response.data;\r\n    } catch (error) {\r\n      result.error = error;\r\n    }\r\n    return result;\r\n  };\r\n  getTotalPersonsFromApi = async () => {\r\n    const result = {\r\n      value: null,\r\n      error: null,\r\n    };\r\n    try {\r\n      const response = await Connector.connector.get(\"/characters\");\r\n      result.value = response.data;\r\n    } catch (error) {\r\n      result.error = error;\r\n    }\r\n    return result;\r\n  };\r\n}\r\nexport default new PersonsActions();\r\n","import connector from \"./connector\";\r\nimport PersonsActions from \"./PersonsActions\";\r\n\r\nclass Repository {\r\n  connector = connector;\r\n  PersonsActions = PersonsActions;\r\n}\r\nexport default new Repository();\r\n","import { persons } from \"../reducers/persons\";\r\nimport Repository from \"../../repository\";\r\n\r\nexport const getPersons = (limit, offset) => async (dispatch) => {\r\n  dispatch(persons.actions.setLoader(true));\r\n  try {\r\n    const { value, error } = await Repository.PersonsActions.getPersonsFromApi(\r\n      limit,\r\n      offset\r\n    );\r\n    if (error) {\r\n      console.log(\"error getting\");\r\n    } else {\r\n      dispatch(persons.actions.setPersons(value));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n  dispatch(persons.actions.setLoader(false));\r\n};\r\nexport const getPerson = (id) => async (dispatch) => {\r\n  dispatch(persons.actions.setLoader(true));\r\n  try {\r\n    const { value, error } = await Repository.PersonsActions.getPersonFromApi(\r\n      id\r\n    );\r\n\r\n    if (error) {\r\n      console.log(\"error getting\");\r\n    } else {\r\n      dispatch(persons.actions.setPerson(value));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n  dispatch(persons.actions.setLoader(false));\r\n};\r\nexport const getQuote = (id) => async (dispatch) => {\r\n  try {\r\n    const { value, error } = await Repository.PersonsActions.getQuoteFromApi(\r\n      id\r\n    );\r\n\r\n    if (error) {\r\n      console.log(\"error getting\");\r\n    } else {\r\n      dispatch(persons.actions.setQuote(value));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const getRandomQuote = (random) => async (dispatch) => {\r\n  try {\r\n    const { value, error } =\r\n      await Repository.PersonsActions.getRandomQuoteFromApi(random);\r\n\r\n    if (error) {\r\n      console.log(\"error getting\");\r\n    } else {\r\n      dispatch(persons.actions.setRandomQuote(value));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const getPersonViaName = (name) => async (dispatch) => {\r\n  dispatch(persons.actions.setLoader(true));\r\n  try {\r\n    const { value, error } =\r\n      await Repository.PersonsActions.getPersonFromApiName(name);\r\n\r\n    if (error) {\r\n      console.log(\"error getting\");\r\n    } else {\r\n      dispatch(persons.actions.setName(value));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n  dispatch(persons.actions.setLoader(false));\r\n};\r\n\r\nexport const getAmount = (limit, offset) => async (dispatch) => {\r\n  try {\r\n    const { value, error } =\r\n      await Repository.PersonsActions.getTotalPersonsFromApi();\r\n\r\n    if (error) {\r\n      console.log(\"error getting\");\r\n    } else {\r\n      dispatch(persons.actions.setTotalAmount(value));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\nexport const clearTest = () => (dispatch) => {\r\n  dispatch(persons.actions.clear());\r\n};\r\n\r\nexport const clearNameFounded = () => (dispatch) => {\r\n  dispatch(persons.actions.clearName());\r\n};\r\n"],"names":["className","style","type","srcSet","mainWebp","mainJpg","src","alt","dispatch","useDispatch","useEffect","clearNameFounded","Connector","this","connector","axios","baseURL","PersonsActions","getPersonsFromApi","limit","offset","result","value","error","response","data","getPersonFromApi","id","getRandomQuoteFromApi","getQuoteFromApi","nameForQuotes","getPersonFromApiName","name","getTotalPersonsFromApi","Repository","getPersons","persons","console","log","getPerson","getQuote","getRandomQuote","random","getPersonViaName","getAmount","clearTest"],"sourceRoot":""}